{"version":3,"sources":["config.js","App.js","reportWebVitals.js","index.js"],"names":["API_URL","window","location","origin","App","React","useState","dataSource","setDataSource","columns","title","dataIndex","key","sorter","a","b","parseInt","token_id","parseFloat","ask_price","render","item","Date","toLocaleDateString","toLocaleTimeString","ask_sale_date","getTime","last_sale","last_sale_date","useEffect","fetch","then","response","json","result","catch","error","console","log","style","padding","bordered","summary","Summary","fixed","Row","Cell","index","colSpan","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"kOACeA,EADCC,OAAOC,SAASC,O,QC+FjBC,MA1Ff,WAAgB,IAAD,EACuBC,IAAMC,SAAS,IADtC,mBACNC,EADM,KACMC,EADN,KAEPC,EAAU,CACd,CACEC,MAAO,WACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAACC,EAAGC,GAAJ,OAAUC,SAASF,EAAEG,UAAYD,SAASD,EAAEE,YAEtD,CACEP,MAAO,YACPC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAACC,EAAGC,GAAJ,OACNG,WAA2B,OAAhBJ,EAAEK,UAAqB,EAAIL,EAAEK,WACxCD,WAA2B,OAAhBH,EAAEI,UAAqB,EAAIJ,EAAEI,aAE5C,CACET,MAAO,gBACPC,UAAW,gBACXC,IAAK,gBACLQ,OAAQ,SAACC,GAAD,OACG,OAATA,EACI,KACA,IAAIC,KAAKD,GAAME,qBACf,IACA,IAAID,KAAKD,GAAMG,sBACrBX,OAAQ,SAACC,EAAGC,GAAJ,OACN,IAAIO,KAAKR,EAAEW,eAAeC,UAC1B,IAAIJ,KAAKP,EAAEU,eAAeC,YAE9B,CACEhB,MAAO,YACPC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAACC,EAAGC,GAAJ,OACNG,WAA2B,OAAhBJ,EAAEa,UAAqB,EAAIb,EAAEa,WACxCT,WAA2B,OAAhBH,EAAEY,UAAqB,EAAIZ,EAAEY,aAE5C,CACEjB,MAAO,iBACPC,UAAW,iBACXC,IAAK,iBACLQ,OAAQ,SAACC,GAAD,OACG,OAATA,EACI,KACA,IAAIC,KAAKD,GAAME,qBACf,IACA,IAAID,KAAKD,GAAMG,sBACrBX,OAAQ,SAACC,EAAGC,GAAJ,OACN,IAAIO,KAAKR,EAAEc,gBAAgBF,UAC3B,IAAIJ,KAAKP,EAAEa,gBAAgBF,YAE/B,CACEhB,MAAO,eACPC,UAAW,eACXC,IAAK,iBAWT,OAPAP,IAAMwB,WAAU,WACdC,MAAM9B,EAAU,SACb+B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAY1B,EAAc0B,MAC/BC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,QAC/B,IAGD,qBAAKG,MAAO,CAAEC,QAAS,IAAvB,SACE,cAAC,IAAD,CACEjC,WAAYA,EACZE,QAASA,EACTgC,UAAQ,EACRC,QAAS,kBACP,cAAC,IAAMC,QAAP,CAAeC,OAAK,EAApB,SACE,eAAC,IAAMD,QAAQE,IAAf,WACE,cAAC,IAAMF,QAAQG,KAAf,CAAoBC,MAAO,EAAGC,QAAS,EAAvC,yCAGA,cAAC,IAAML,QAAQG,KAAf,CAAoBC,MAAO,EAAGC,QAAS,EAAvC,SACGzC,EAAW0C,oBCzEbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAAStC,OACP,cAAC,IAAMuC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.d400c3e2.chunk.js","sourcesContent":["const API_URL = window.location.origin;\nexport default API_URL;\n","import \"./App.css\";\nimport React from \"react\";\nimport { Table } from \"antd\";\nimport API_URL from \"./config\";\n\nfunction App() {\n  const [dataSource, setDataSource] = React.useState([]);\n  const columns = [\n    {\n      title: \"Token ID\",\n      dataIndex: \"token_id\",\n      key: \"token_id\",\n      sorter: (a, b) => parseInt(a.token_id) - parseInt(b.token_id),\n    },\n    {\n      title: \"Ask Price\",\n      dataIndex: \"ask_price\",\n      key: \"ask_price\",\n      sorter: (a, b) =>\n        parseFloat(a.ask_price === null ? 0 : a.ask_price) -\n        parseFloat(b.ask_price === null ? 0 : b.ask_price),\n    },\n    {\n      title: \"Ask Sale Date\",\n      dataIndex: \"ask_sale_date\",\n      key: \"ask_sale_date\",\n      render: (item) =>\n        item === null\n          ? null\n          : new Date(item).toLocaleDateString() +\n            \" \" +\n            new Date(item).toLocaleTimeString(),\n      sorter: (a, b) =>\n        new Date(a.ask_sale_date).getTime() -\n        new Date(b.ask_sale_date).getTime(),\n    },\n    {\n      title: \"Last Sale\",\n      dataIndex: \"last_sale\",\n      key: \"last_sale\",\n      sorter: (a, b) =>\n        parseFloat(a.last_sale === null ? 0 : a.last_sale) -\n        parseFloat(b.last_sale === null ? 0 : b.last_sale),\n    },\n    {\n      title: \"Last Sale Date\",\n      dataIndex: \"last_sale_date\",\n      key: \"last_sale_date\",\n      render: (item) =>\n        item === null\n          ? null\n          : new Date(item).toLocaleDateString() +\n            \" \" +\n            new Date(item).toLocaleTimeString(),\n      sorter: (a, b) =>\n        new Date(a.last_sale_date).getTime() -\n        new Date(b.last_sale_date).getTime(),\n    },\n    {\n      title: \"Opensea Link\",\n      dataIndex: \"opensea_link\",\n      key: \"opensea_link\",\n    },\n  ];\n\n  React.useEffect(() => {\n    fetch(API_URL + \"/data\")\n      .then((response) => response.json())\n      .then((result) => setDataSource(result))\n      .catch((error) => console.log(error));\n  }, []);\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Table\n        dataSource={dataSource}\n        columns={columns}\n        bordered\n        summary={() => (\n          <Table.Summary fixed>\n            <Table.Summary.Row>\n              <Table.Summary.Cell index={0} colSpan={2}>\n                Total fetched tokens number\n              </Table.Summary.Cell>\n              <Table.Summary.Cell index={1} colSpan={4}>\n                {dataSource.length}\n              </Table.Summary.Cell>\n            </Table.Summary.Row>\n          </Table.Summary>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}